/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     interFoamOrgP;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         60;

deltaT          0.001;

writeControl    adjustableRunTime;

writeInterval   2;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  on;

maxCo           0.2;
maxAlphaCo      0.2;

maxDeltaT       0.01;

functions


{
  //calculate and monitor the total volumeo of water in the domain

  totalWaterVolume
  {
    type            volFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (alpha.water);
    writeFields     no; // yes | no
    writeControl    writeTime;
    regionType      all;
    operation       volIntegrate;
  } 


  X1Discharge
  {
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (UWater);
//    writeControl    writeTime;
    writeFields     no; // yes | no
    regionType      sampledSurface;
    name            x1;
    operation       areaNormalIntegrate;
  //  operation   areaIntegrate;

    // List of oriented fields
    //orientedFields  (<field names>);

    // Write the total area of the faces
    writeArea       yes;

    sampledSurfaceDict
    {
        type            plane; 
        planeType       pointAndNormal;
        pointAndNormalDict 
        { 
            basePoint       (-1.5 0 0);
            normalVector    (1 0 0);
           interpolate true;
           source  cells;
        } 
    }

   }


  X2Discharge
  {
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (UWater);
    writeControl    writeTime;
    writeFields     no; // yes | no
    regionType      sampledSurface;
    name            x2;
    operation       areaNormalIntegrate;
  //  operation   areaIntegrate;

    // List of oriented fields
    //orientedFields  (<field names>);

    // Write the total area of the faces
    writeArea       yes;

    sampledSurfaceDict
    {
        type            plane;
        planeType       pointAndNormal;
        pointAndNormalDict
        {
            basePoint       (-1 0 0);
            normalVector    (1 0 0);
           interpolate true;
           source  cells;
        }
    }

   }

  X3Discharge
  {
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (UWater);
    writeControl    writeTime;
    writeFields     no; // yes | no
    regionType      sampledSurface;
    name            x3;
    operation       areaNormalIntegrate;
  //  operation   areaIntegrate;

    // List of oriented fields
    //orientedFields  (<field names>);

    // Write the total area of the faces
    writeArea       yes;

    sampledSurfaceDict
    {
        type            plane;
        planeType       pointAndNormal;
        pointAndNormalDict
        {
            basePoint       (0 0 0);
            normalVector    (1 0 0);
           interpolate true;
           source  cells;
        }
    }

   }

  X4Discharge
  {
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (UWater);
    writeControl    writeTime;
    writeFields     no; // yes | no
    regionType      sampledSurface;
    name            x4;
    operation       areaNormalIntegrate;
  //  operation   areaIntegrate;

    // List of oriented fields
    //orientedFields  (<field names>);

    // Write the total area of the faces
    writeArea       yes;

    sampledSurfaceDict
    {
        type            plane;
        planeType       pointAndNormal;
        pointAndNormalDict
        {
            basePoint       (1 0 0);
            normalVector    (1 0 0);
           interpolate true;
           source  cells;
        }
    }

   }


  X5Discharge
  {
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (UWater);
    writeControl    writeTime;
    writeFields     no; // yes | no
    regionType      sampledSurface;
    name            x5;
    operation       areaNormalIntegrate;
  //  operation   areaIntegrate;

    // List of oriented fields
    //orientedFields  (<field names>);

    // Write the total area of the faces
    writeArea       yes;

    sampledSurfaceDict
    {
        type            plane;
        planeType       pointAndNormal;
        pointAndNormalDict
        {
            basePoint       (1.5 0 0);
            normalVector    (1 0 0);
           interpolate true;
           source  cells;
        }
    }

   }
 


  //calcualte the water flux (discharge) at the outlet
  outletDischarge
  {
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (phi);
    writeFields     no; // yes | no
    regionType      patch;
    name            outlet;
    operation       weightedSum;


    // List of oriented fields
    //orientedFields  (<field names>);

    // Weight field - must be a scalar
    weightField     alpha.water;

    // Write the total area of the faces
    writeArea       yes;
  }



/*

  //sampling on surfaces
  surfaces
  {
    type            surfaces;
    libs            ("libsampling.so");
 //   writeControl    writeTime;

    surfaceFormat   vtk;
    fields          (UWater alpha.water p);

    interpolationScheme cellPoint;

    surfaces
    (
        X1 
        {
            type          plane;// cuttingPlane;
            planeType       pointAndNormal;
            pointAndNormalDict
            {
                point   (2.4 0 0);
                normal  (1 0 0);
            }
            interpolate     true;
        }
    );
  }

*/


  STLQDN03
  {
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (UWater);
 //   writeControl    writeTime;
    writeFields     no; // yes | no
    regionType      sampledSurface;
    name            QND03.stl;
    operation       areaNormalIntegrate;
  //  operation   areaIntegrate;

    // List of oriented fields
    //orientedFields  (<field names>);

    // Write the total area of the faces
    writeArea       yes;

    sampledSurfaceDict
        {
           // Sampling on triSurface
           type        sampledTriSurfaceMesh;
           surface     QND03.stl;
           source  insideCells;  // cells;  // sample cells or boundaryFaces
           interpolate false;   //true;
        }

   }





  STLQDN02
  {
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (UWater);
 //   writeControl    writeTime;
    writeFields     no; // yes | no
    regionType      sampledSurface;
    name            QND02.stl;
    operation       areaNormalIntegrate;
  //  operation   areaIntegrate;

    // List of oriented fields
    //orientedFields  (<field names>);

    // Write the total area of the faces
    writeArea       yes;

    sampledSurfaceDict
        {
           // Sampling on triSurface
           type        sampledTriSurfaceMesh;
           surface     QND02.stl;
           source  insideCells;  // cells;  // sample cells or boundaryFaces
           interpolate false;   //true;
        }

   }

  STLQDN01
  {
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (UWater);
 //   writeControl    writeTime;
    writeFields     no; // yes | no
    regionType      sampledSurface;
    name            QND01.stl;
    operation       areaNormalIntegrate;
  //  operation   areaIntegrate;

    // List of oriented fields
    //orientedFields  (<field names>);

    // Write the total area of the faces
    writeArea       yes;

    sampledSurfaceDict
        {
           // Sampling on triSurface
           type        sampledTriSurfaceMesh;
           surface     QND01.stl;
           source  insideCells;  // cells;  // sample cells or boundaryFaces
           interpolate false;   //true;
        }

   }


  STLQD00
  {
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (UWater);
 //   writeControl    writeTime;
    writeFields     no; // yes | no
    regionType      sampledSurface;
    name            QD00.stl;
    operation       areaNormalIntegrate;
  //  operation   areaIntegrate;

    // List of oriented fields
    //orientedFields  (<field names>);

    // Write the total area of the faces
    writeArea       yes;

    sampledSurfaceDict
        {
           // Sampling on triSurface
           type        sampledTriSurfaceMesh;
           surface     QD00.stl;
           source  insideCells;  // cells;  // sample cells or boundaryFaces
           interpolate false;   //true;
        }

   }


  STLQ01
  {
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (UWater);
 //   writeControl    writeTime;
    writeFields     no; // yes | no
    regionType      sampledSurface;
    name            QD01.stl;
    operation       areaNormalIntegrate;
  //  operation   areaIntegrate;

    // List of oriented fields
    //orientedFields  (<field names>);

    // Write the total area of the faces
    writeArea       yes;

    sampledSurfaceDict
        {
           // Sampling on triSurface
           type        sampledTriSurfaceMesh;
           surface     QD01.stl;
           source  insideCells;  // cells;  // sample cells or boundaryFaces
           interpolate false;   //true;
        }

   }


  STLQD02
  {
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (UWater);
 //   writeControl    writeTime;
    writeFields     no; // yes | no
    regionType      sampledSurface;
    name            QD02.stl;
    operation       areaNormalIntegrate;
  //  operation   areaIntegrate;

    // List of oriented fields
    //orientedFields  (<field names>);

    // Write the total area of the faces
    writeArea       yes;

    sampledSurfaceDict
        {
           // Sampling on triSurface
           type        sampledTriSurfaceMesh;
           surface     QD02.stl;
           source  insideCells;  // cells;  // sample cells or boundaryFaces
           interpolate false;   //true;
        }

   }


  STLQD03
  {
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (UWater);
 //   writeControl    writeTime;
    writeFields     no; // yes | no
    regionType      sampledSurface;
    name            QD03.stl;
    operation       areaNormalIntegrate;
  //  operation   areaIntegrate;

    // List of oriented fields
    //orientedFields  (<field names>);

    // Write the total area of the faces
    writeArea       yes;

    sampledSurfaceDict
        {
           // Sampling on triSurface
           type        sampledTriSurfaceMesh;
           surface     QD03.stl;
           source  insideCells;  // cells;  // sample cells or boundaryFaces
           interpolate false;   //true;
        }

   }




  STLQUpN03
  {
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (UWater);
 //   writeControl    writeTime;
    writeFields     no; // yes | no
    regionType      sampledSurface;
    name            QUpN03.stl;
    operation       areaNormalIntegrate;
  //  operation   areaIntegrate;

    // List of oriented fields
    //orientedFields  (<field names>);

    // Write the total area of the faces
    writeArea       yes;

    sampledSurfaceDict
        {
           // Sampling on triSurface
           type        sampledTriSurfaceMesh;
           surface     QUpN03.stl;
           source  insideCells;  // cells;  // sample cells or boundaryFaces
           interpolate false;   //true;
        }

   }





  STLQUpN02
  {
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (UWater);
 //   writeControl    writeTime;
    writeFields     no; // yes | no
    regionType      sampledSurface;
    name            QUpN02.stl;
    operation       areaNormalIntegrate;
  //  operation   areaIntegrate;

    // List of oriented fields
    //orientedFields  (<field names>);

    // Write the total area of the faces
    writeArea       yes;

    sampledSurfaceDict
        {
           // Sampling on triSurface
           type        sampledTriSurfaceMesh;
           surface     QUpN02.stl;
           source  insideCells;  // cells;  // sample cells or boundaryFaces
           interpolate false;   //true;
        }

   }

  STLQUpN01
  {
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (UWater);
 //   writeControl    writeTime;
    writeFields     no; // yes | no
    regionType      sampledSurface;
    name            QUpN01.stl;
    operation       areaNormalIntegrate;
  //  operation   areaIntegrate;

    // List of oriented fields
    //orientedFields  (<field names>);

    // Write the total area of the faces
    writeArea       yes;

    sampledSurfaceDict
        {
           // Sampling on triSurface
           type        sampledTriSurfaceMesh;
           surface     QUpN01.stl;
           source  insideCells;  // cells;  // sample cells or boundaryFaces
           interpolate false;   //true;
        }

   }


  STLQUp00
  {
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (UWater);
 //   writeControl    writeTime;
    writeFields     no; // yes | no
    regionType      sampledSurface;
    name            QUp00.stl;
    operation       areaNormalIntegrate;
  //  operation   areaIntegrate;

    // List of oriented fields
    //orientedFields  (<field names>);

    // Write the total area of the faces
    writeArea       yes;

    sampledSurfaceDict
        {
           // Sampling on triSurface
           type        sampledTriSurfaceMesh;
           surface     QUp00.stl;
           source  insideCells;  // cells;  // sample cells or boundaryFaces
           interpolate false;   //true;

        }

   }

  STLQUp01
  {
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (UWater);
 //   writeControl    writeTime;
    writeFields     no; // yes | no
    regionType      sampledSurface;
    name            QUp01.stl;
    operation       areaNormalIntegrate;
  //  operation   areaIntegrate;

    // List of oriented fields
    //orientedFields  (<field names>);

    // Write the total area of the faces
    writeArea       yes;

    sampledSurfaceDict
        {
           // Sampling on triSurface
           type        sampledTriSurfaceMesh;
           surface     QUp01.stl;
           source  insideCells;  // cells;  // sample cells or boundaryFaces
           interpolate false;   //true;

        }

   }

  STLQUp02
  {
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (UWater);
 //   writeControl    writeTime;
    writeFields     no; // yes | no
    regionType      sampledSurface;
    name            QUp02.stl;
    operation       areaNormalIntegrate;
  //  operation   areaIntegrate;

    // List of oriented fields
    //orientedFields  (<field names>);

    // Write the total area of the faces
    writeArea       yes;

    sampledSurfaceDict
        {
           // Sampling on triSurface
           type        sampledTriSurfaceMesh;
           surface     QUp02.stl;
           source  insideCells;  // cells;  // sample cells or boundaryFaces
           interpolate false;   //true;
        }

   }


  STLQUp03
  {
    type            surfaceFieldValue;
    libs            ("libfieldFunctionObjects.so");
    fields          (UWater);
 //   writeControl    writeTime;
    writeFields     no; // yes | no
    regionType      sampledSurface;
    name            QUp03.stl;
    operation       areaNormalIntegrate;
  //  operation   areaIntegrate;

    // List of oriented fields
    //orientedFields  (<field names>);

    // Write the total area of the faces
    writeArea       yes;

    sampledSurfaceDict
        {
           // Sampling on triSurface
           type        sampledTriSurfaceMesh;
           surface     QUp03.stl;
           source  insideCells;  // cells;  // sample cells or boundaryFaces
           interpolate false;   //true;
        }

   }




  //#includeFunc  probes
     #include  "probes"


    fieldAverage1
    {
        type            fieldAverage;
        functionObjectLibs ( "libfieldFunctionObjects.so" );
        enabled         true;
        cleanRestart    false;
        timeStart       50;
        timeEnd         200;
        outputControl   outputTime;

        fields
        (
            U
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }
            k
            {
                mean        on;
                prime2Mean  off;
                base        time;
            }
            alpha.water
            {
                mean        on;
                prime2Mean  off;
                base        time;
            }

            p_rgh
            {
                mean        on;
                prime2Mean  off;
                base        time;
            }


        );
    }






}


// ************************************************************************* //
